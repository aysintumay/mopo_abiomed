setting device: cuda:0
/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/gym/envs/registration.py:595: UserWarning: [33mWARN: Overriding environment Abiomed-v0[0m
  logger.warn(f"Overriding environment {id}")
/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/torch/nn/modules/transformer.py:307: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)
  warnings.warn(f"enable_nested_tensor is True, but self.use_nested_tensor is False because {why_not_sparsity_fast_path}")
/home/ubuntu/mopo/models/world_transformer.py:79: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  dta = torch.load(os.path.join(self.path, 'pp_train_amicgs.pt')).numpy()
Traceback (most recent call last):
  File "/home/ubuntu/mopo/test.py", line 371, in <module>
    test()
  File "/home/ubuntu/mopo/test.py", line 247, in test
    env = gym.make(args.task, args = args, logger = logger, data_name = "train", pretrained = True)
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/gym/envs/registration.py", line 676, in make
    return registry.make(id, **kwargs)
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/gym/envs/registration.py", line 520, in make
    return spec.make(**kwargs)
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/gym/envs/registration.py", line 140, in make
    env = cls(**_kwargs)
  File "/home/ubuntu/mopo/abiomed_env.py", line 18, in __init__
    self.world_model = WorldTransformer(args = self.args, logger = self.logger, pretrained = self.pretrained)
  File "/home/ubuntu/mopo/models/world_transformer.py", line 37, in __init__
    self.train_loader = self.read_data('train')
  File "/home/ubuntu/mopo/models/world_transformer.py", line 89, in read_data
    x_n = (dta - self.rwd_mean) / self.rwd_std
KeyboardInterrupt
Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/wandb/sdk/lib/service_connection.py", line 94, in teardown_atexit
    conn.teardown(hooks.exit_code)
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/wandb/sdk/lib/service_connection.py", line 226, in teardown
    self._router.join()
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/site-packages/wandb/sdk/interface/router.py", line 75, in join
    self._thread.join()
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/threading.py", line 1011, in join
    self._wait_for_tstate_lock()
  File "/home/ubuntu/miniconda3/envs/mopo/lib/python3.8/threading.py", line 1027, in _wait_for_tstate_lock
    elif lock.acquire(block, timeout):
KeyboardInterrupt
